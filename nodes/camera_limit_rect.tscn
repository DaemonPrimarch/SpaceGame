[gd_scene load_steps=5 format=2]

[ext_resource path="res://nodes/camera_limit_set_area.tscn" type="PackedScene" id=1]
[ext_resource path="res://addons/extended_collision_polygon_2D/extended_collision_polygon_2D.gd" type="Script" id=2]

[sub_resource type="GDScript" id=1]

script/source = "tool
extends Polygon2D

export var simple = true setget set_simple
export var can_zoom_out = false

func _ready():
	if(is_simple() and not has_node(\"simple_limit_set_area\") and Engine.editor_hint):
		var node = preload(\"res://nodes/camera_limit_set_area.tscn\").instance()
		
		node.name = \"simple_limit_set_area\"
		
		var pol = preload(\"res://addons/extended_collision_polygon_2D/extended_collision_polygon_2D.gd\").new()
		
		if(pol != []):
			pol.polygon = polygon
		
		node.add_child(pol)
		
		add_child(node)
		
		pol.set_owner(get_tree().get_edited_scene_root())
		
		node.set_owner(get_tree().get_edited_scene_root())

func set_polygon(pol):
	.set_polygon(pol)
	
	if(is_simple() and has_node(\"simple_limit_set_area\") and Engine.editor_hint):
		get_node(\"simple_limit_set_area\").get_node(\"CollisionPolygon2D\").polygon = pol

func set_simple(val):
	simple = val

func is_simple():
	return simple

func get_limit_rect():
	var box = get_node(\"/root/MATHS\").get_AABB_of_polygon(polygon)
	
	box.position += global_position
	
	return box
"

[sub_resource type="GDScript" id=2]

script/source = "tool
extends Area2D

var camera_bodies_inside = {}

func _ready():
	set_physics_process(not Engine.editor_hint)
	
	connect(\"body_entered\", self, \"entered\")
	connect(\"body_exited\", self, \"exited\")
	
func entered(thing):
	if(thing.is_in_group(\"carries_camera\")):
		for child in thing.get_children():
			if(child.is_in_group(\"extended_camera\")):
				add_camera_limit_rect(thing, child.get_limit_area())

func exited(thing):
	if(thing.is_in_group(\"carries_camera\")):
		remove_camera_limit_rect(thing, camera_bodies_inside[thing])

func get_area():
	return get_parent()
	
func add_camera_limit_rect(body, rect):
	for child in body.get_children():
		if(child.is_in_group(\"extended_camera\")):
			child.add_limit_area(rect)
	
	camera_bodies_inside[body] = rect

func remove_camera_limit_rect(body, rect):
	for child in body.get_children():
		if(child.is_in_group(\"extended_camera\")):
			child.remove_limit_area(rect)
	
	camera_bodies_inside.erase(body)
	
func _physics_process(delta):
	for body in camera_bodies_inside:
		for child in body.get_children():
			if(child.is_in_group(\"extended_camera\") and child.get_limit_area() != get_area() and (body.is_grounded() or body.get_node(\"track_manager\").is_on_track())):
				remove_camera_limit_rect(body, camera_bodies_inside[body])
				add_camera_limit_rect(body, get_area())"

[node name="camera_limit_rect" type="Polygon2D" index="0"]

polygon = PoolVector2Array(  )
uv = PoolVector2Array(  )
color = Color( 1, 1, 1, 1 )
vertex_colors = PoolColorArray(  )
offset = Vector2( 0, 0 )
antialiased = false
texture = null
texture_offset = Vector2( 0, 0 )
texture_scale = Vector2( 1, 1 )
texture_rotation_degrees = 0.0
invert_enable = false
invert_border = 100.0
script = SubResource( 1 )
simple = true
can_zoom_out = false

[node name="simple_limit_set_area" parent="." index="0" instance=ExtResource( 1 )]

script = SubResource( 2 )

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="simple_limit_set_area" index="0"]

build_mode = 0
polygon = PoolVector2Array(  )
script = ExtResource( 2 )


